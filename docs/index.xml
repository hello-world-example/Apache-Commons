<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Apache Commonsa on Apache-Commons</title>
    <link>https://hello-world-example.github.io/Apache-Commons/</link>
    <description>Recent content in Apache Commonsa on Apache-Commons</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://hello-world-example.github.io/Apache-Commons/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Apache-Commons/_sidebar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Apache-Commons/_sidebar/</guid>
      <description> Codec Compress  TarUtil  Configuration  快速开始指南 Properties 文件 Yaml 文件 自动加载 运行时依赖  Ognl Pool  入门示例 GenericObjectPoolConfig 配置项   </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Apache-Commons/docs/Compress/tar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Apache-Commons/docs/Compress/tar/</guid>
      <description>tar 工具类 对应的 Linxu tar 命令：
 tar cf &amp;lt;file.tar&amp;gt; &amp;lt;file&amp;gt; 将由文件 &amp;lt;file&amp;gt; 创建名为&amp;lt;file.tar&amp;gt;归档文件，同时保留原文件  如果加上参数 z 则归档之后会进行 gzip 压缩（*.tar.gz）  tar xf &amp;lt;file.tar&amp;gt; 将由归档文件&amp;lt;file.tar&amp;gt;创建名为&amp;lt;file&amp;gt;的文件/目录，同时保留原文件
 如果加上参数 z 则解归档之前会进行解压缩（*.tar.gz）
import org.apache.commons.compress.archivers.tar.TarArchiveEntry; import org.apache.commons.compress.archivers.tar.TarArchiveInputStream; import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream; import java.io.*; public abstract class TarUtil { private static final String BASE_DIR = &amp;#34;&amp;#34;; // 符号&amp;#34;/&amp;#34;用来作为目录标识判断符 private static final String PATH_SPLITOR = &amp;#34;/&amp;#34;; private static final int BUFFER = 1024; private static final String EXT = &amp;#34;.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Apache-Commons/docs/Configuration/Auto-Reload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Apache-Commons/docs/Configuration/Auto-Reload/</guid>
      <description>自动加载 URL pathsRes = ClassLoader.getSystemResource(&amp;#34;comment.properties&amp;#34;); EventListenerParameters listenerParams = new EventListenerParameters(); listenerParams.addEventListener( ConfigurationBuilderEvent.RESET, event -&amp;gt; System.out.println(&amp;#34;Event:&amp;#34; + event.getEventType().getName()) ); FileBasedBuilderParameters parameters = new Parameters().fileBased().setURL(pathsRes); ReloadingFileBasedConfigurationBuilder&amp;lt;PropertiesConfiguration&amp;gt; builder = new ReloadingFileBasedConfigurationBuilder&amp;lt;&amp;gt;(PropertiesConfiguration.class) .configure(parameters, listenerParams); PeriodicReloadingTrigger trigger = new PeriodicReloadingTrigger( builder.getReloadingController(), null, 1, TimeUnit.SECONDS); trigger.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Apache-Commons/docs/Configuration/Dependencies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Apache-Commons/docs/Configuration/Dependencies/</guid>
      <description>Runtime Dependencies    Component Dependencies     Core commons-lang commons-logging   Configuration builders commons-beanutils   PropertyListConfiguration
XMLPropertyListConfiguration commons-codec   JSONConfiguration com.fasterxml.jackson.core:jackson-databind   YAMLConfiguration org.yaml:snakeyaml   ConfigurationDynaBean commons-beanutils   XPathExpressionEngine commons-jxpath   CatalogResolver xml-resolver   Web configurations servlet-api   ExprLookup commons-jexl   VFSFileSystem
VFSFileChangedReloadingStrategy commons-vfs   ConfigPropertySource spring-core    Maven 依赖 Core &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Apache-Commons/docs/Configuration/Properties/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Apache-Commons/docs/Configuration/Properties/</guid>
      <description>Properties 配置 属性引用 database.host = db.acme.com database.port = 8199 database.address = ${database.host}:${database.port} 使用方式一样
// db.acme.com:8199 properties.getString(&amp;#34;database.address&amp;#34;) 包含其他配置文件 database.properties
database.timeout = 60000 include = database_db1.properties include = database_db2.properties database_db1.properties
database.db1.host = db.acme.com1 database.db1.port = 81991 database.db1.user = admin1 database.db1.password = ???1 database_db2.properties
database.db2.host = db.acme.com2 database.db2.port = 81992 database.db2.user = admin2 database.db2.password = ???2// db.acme.com1 properties.getString(&amp;#34;database.db1.host&amp;#34;); // db.acme.com2 properties.getString(&amp;#34;database.db2.host&amp;#34;); 特殊编码 key = \u4e2d\u6587\u5b57\u7b26 config.dirs = C:\\Temp\\,D:\\data\\// 中文字符 properties.getString(&amp;#34;key&amp;#34;); // [C:\Temp\,D:\data\] properties.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Apache-Commons/docs/Configuration/Quick-Start-Guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Apache-Commons/docs/Configuration/Quick-Start-Guide/</guid>
      <description>快速开始指南 读取 properties 文件 database.properties 是一个配置文件的示例：
database.host = db.acme.com database.port = 8199 database.user = admin database.password = ??? database.timeout = 60000 zk.addresses = host1,host2,host3 读取这个文件最简单的方式是通过 Configurations 帮助类。 这个类提供了一系列从不同源创建配置对象的方法。读取 properties 代码如下：
Configurations configs = new Configurations(); URL databaseRes = ClassLoader.getSystemResource(&amp;#34;database.properties&amp;#34;); Configuration config = configs.properties(databaseRes); String dbHost = config.getString(&amp;#34;database.host&amp;#34;); int dbPort = config.getInt(&amp;#34;database.port&amp;#34;); List&amp;lt;String&amp;gt; addresses = config.getList(String.class, &amp;#34;zk.addresses&amp;#34;); Iterator&amp;lt;String&amp;gt; database = config.getKeys(&amp;#34;database&amp;#34;); 读取 XML 文件 paths.xml 文件内容如下:
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;ISO-8859-1&amp;#34; ?&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;processing stage=&amp;#34;qa&amp;#34;&amp;gt; &amp;lt;paths&amp;gt; &amp;lt;path&amp;gt;/data/path1&amp;lt;/path&amp;gt; &amp;lt;path&amp;gt;/data/otherpath&amp;lt;/path&amp;gt; &amp;lt;path&amp;gt;/var/log&amp;lt;/path&amp;gt; &amp;lt;/paths&amp;gt; &amp;lt;/processing&amp;gt; &amp;lt;/configuration&amp;gt; 读取 xml 配置文件的方式与 properties 文件类似：</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Apache-Commons/docs/Configuration/Yaml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Apache-Commons/docs/Configuration/Yaml/</guid>
      <description>操作 YAML 文件 新增依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.yaml&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;snakeyaml&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.24&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; my.yaml spring: application: name: spring-${person.name} person: name: Kail age: 27 代码示例 URL myYaml = ClassLoader.getSystemResource(&amp;#34;my.yaml&amp;#34;); Configurations configurations = new Configurations(); YAMLConfiguration configuration = configurations.fileBased(YAMLConfiguration.class, myYaml); String string = configuration.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Apache-Commons/docs/Pool/GenericObjectPoolConfig/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Apache-Commons/docs/Pool/GenericObjectPoolConfig/</guid>
      <description>GenericObjectPoolConfig    属性 类型 默认值 作用     maxTotal int 8 池中最多可用的实例个数   maxIdle int 8 池中最多可容纳的实例（instances）个数   minIdle int 0 池中最少需要容纳的实例（instances）个数   lifo boolean TRUE 池中实例的操作是否按照LIFO（后进先出）的原则   fairness boolean FALSE 租借池化对象的客户端按照FIFO进行   maxWaitMillis long -1 调用borrowObject方法时，需要等待的最长时间   minEvictableIdleTimeMillis long 1800000 池中对象处于空闲状态开始到被回收的最短时间   softMinEvictableIdleTimeMillis long 3 池中对象处于空闲状态开始到被回收的最短时间   numTestsPerEvictionRun int 3 池中处于空闲状态的对象每次被检测是否回收时 最多只检测3个处于空闲状态的对象,比如该值设置为3,此时池中有5个闲置对象,那么每次只会检查前三个闲置对象   evictionPolicyClassName String org.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Apache-Commons/docs/Pool/Simple-Exmaple/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Apache-Commons/docs/Pool/Simple-Exmaple/</guid>
      <description>入门示例 A Simple Pool Client 假设您正在编写 java.io.Reader 工具包，并提供将 Reader 转换成 String 的方法。以下是在没有使用 ObjectPool 的情况下实现的 ReaderUtil 的代码：
import java.io.Reader; import java.io.IOException; public class ReaderUtil { public ReaderUtil() { } public String readToString(Reader in) throws IOException { StringBuffer buf = new StringBuffer(); try { for(int c = in.read(); c != -1; c = in.read()) { buf.append((char)c); } return buf.toString(); } finally { try { in.close(); } catch(Exception e) { // ignored  } } } } 以下是使用 Pool 的代码示例</description>
    </item>
    
  </channel>
</rss>